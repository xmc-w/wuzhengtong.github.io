<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2017/10/10/PersonalMiscellanies/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="http://wuzhengtong.top/">myBlog</a>! This is my very first post.<br>欢迎来到<a href="http://wuzhentong.top/">我的博客</a>！这是我的第一次提交。</p>
<p><img src="https://xmc-myblog-1257745026.cos.ap-chengdu.myqcloud.com/helloword.jpeg" alt="mark"></p>
<a id="more"></a>

<p>使用hexo + github page搭建的个人博客</p>
<p>主题使用nextT</p>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>AndroidAnnotations</title>
    <url>/2017/10/11/android/AndroidaAnnotations/</url>
    <content><![CDATA[<p>AndroidStudio中使用AndroidAnnotations</p>
<p><img src="https://xmc-myblog-1257745026.cos.ap-chengdu.myqcloud.com/annotations.png" alt="mark"></p>
<a id="more"></a>
<h2 id="Building-Project-Gradle"><a href="#Building-Project-Gradle" class="headerlink" title="Building Project Gradle"></a>Building Project Gradle</h2><p>Gradle2.3.0及以后的版本构建支持annotation processors，使用方法如下<br>project build.gradle</p>
<pre><code>buildscript &#123;
    repositories &#123;
      mavenCentral()
    &#125;
    dependencies &#123;
        // replace with the current version of the Android plugin
        classpath &#39;com.android.tools.build:gradle:2.3.0&#39;
    &#125;
&#125;
</code></pre>
<p>Module build.gradle</p>
<pre><code>apply plugin: &#39;com.android.application&#39;
def AAVersion = &#39;XXX&#39;

dependencies &#123;
    annotationProcessor &quot;org.androidannotations:androidannotations:$AAVersion&quot;
    compile &quot;org.androidannotations:androidannotations-api:$AAVersion&quot;
&#125;
</code></pre>
<p><strong>Gradle2.3.0之前可以使用gradle插件android-apt,来加载annotation processors，使用方法如下</strong><br>project build.gradle</p>
<pre><code>buildscript &#123;
    repositories &#123;
      mavenCentral()
    &#125;
    dependencies &#123;
        // replace with the current version of the Android plugin
        classpath &#39;com.android.tools.build:gradle:1.5.0&#39;
        // replace with the current version of the android-apt plugin
        classpath &#39;com.neenbedankt.gradle.plugins:android-apt:1.8&#39;
    &#125;
&#125;
</code></pre>
<p>Module build.gradle</p>
<pre><code>apply plugin: &#39;com.android.application&#39;
apply plugin: &#39;android-apt&#39;
def AAVersion = &#39;XXX&#39;

dependencies &#123;
    apt &quot;org.androidannotations:androidannotations:$AAVersion&quot;
    compile &quot;org.androidannotations:androidannotations-api:$AAVersion&quot;
&#125;
</code></pre>
<h1 id="AndroidAnnotations中的注解"><a href="#AndroidAnnotations中的注解" class="headerlink" title="AndroidAnnotations中的注解"></a><strong>AndroidAnnotations中的注解</strong></h1><h2 id="强化Application"><a href="#强化Application" class="headerlink" title="强化Application"></a><strong>强化Application</strong></h2><p><strong>@EApplication</strong></p>
<pre><code>@EApplication
public class MyApplication extends Application&#123;
&#125;
</code></pre>
<p>@App<br>可以用在@EActivity,@EBean中,注入Application;</p>
<pre><code>@EActivity
public class MyActivity extends Activity&#123;
    @App
    MyApplication application;
&#125;
</code></pre>
<h2 id="强化Activity"><a href="#强化Activity" class="headerlink" title="强化Activity"></a><strong>强化Activity</strong></h2><p><strong>@EActivity</strong></p>
<pre><code>@EActivity(R.layout.activity_my)
public class MyActivity extends Activity &#123;
  // ...
&#125;
</code></pre>
<p>生成下面这个子类，在同一个包下面，但在不同的源文件中：</p>
<pre><code>public final class MyActivity_ extends MyActivity &#123;
  // ...
&#125;
</code></pre>
<p>在AndroidManifest.xml</p>
<pre><code>&lt;activity android:name=&quot;.MyActivity_&quot;/&gt;
</code></pre>
<p>启动MyActicvity</p>
<pre><code>MyActivity_.intent(context).withOptions(bundle).start().withAnimation(enterAnimRes, exitAnimRes);
</code></pre>
<p>启动MyActivity带返回值的</p>
<pre><code>MyActivity_.intent(context).startForResult(REQUEST_CODE);
</code></pre>
<p><strong>@onActivityResult</strong></p>
<pre><code>@OnActivityResult(REQUEST_CODE)
void onResult(int resultCode, Intent data) &#123;
&#125;
@OnActivityResult(REQUEST_CODE)
void onResult(@OnActivityResult.Extra String strVal, @OnActivityResult.Extra int intVal) &#123;
&#125;
</code></pre>
<p><strong>onBackPressed()</strong><br>使用@EActivity后可以使用onBackPressed()方法，处理回退键响应</p>
<pre><code>public final class MyActivity_ extends MyActivity
&#123;
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) &#123;
        if (((SdkVersionHelper.getSdkInt()&lt; 5)&amp;&amp;(keyCode == KeyEvent.KEYCODE_BACK))&amp;&amp;(event.getRepeatCount() == 0)) &#123;
            onBackPressed();
        &#125;
        return super.onKeyDown(keyCode, event);
    &#125;
&#125;
</code></pre>
<p><strong>@WindowFeature</strong></p>
<pre><code>@WindowFeature(&#123; Window.FEATURE_NO_TITLE, Window.FEATURE_INDETERMINATE_PROGRESS &#125;)
@EActivity
public class MyActivity extends Activity &#123;
&#125;
</code></pre>
<p><strong>@Fullscreen</strong></p>
<pre><code>@Fullscreen
public class MyActivity extends Activity &#123;
&#125;
</code></pre>
<h2 id="强化Fragment"><a href="#强化Fragment" class="headerlink" title="强化Fragment"></a><strong>强化Fragment</strong></h2><p><strong>@Efragment</strong></p>
<pre><code>@EFragment(R.layout.my_fragment_layout)
public class MyFragment extends Fragment&#123;
&#125;
</code></pre>
<p>如果重写onCreateView，且返回的该方法返回的view不为空，采用暴力注入布局使得布局生效：</p>
<pre><code>@Efragment(value = R.layout.my_custom_layout, forceLayoutInjection = true)
public class MyFragment extends ListFragment&#123;
&#125;
</code></pre>
<p><strong>@FragmentArg</strong></p>
<pre><code>@EFragment
public class MyFragment extends Fragment &#123;
  @FragmentArg(&quot;myStringArgument&quot;)
  String myMessage;

  @FragmentArg
  String anotherStringArgument;

  @FragmentArg(&quot;myDateExtra&quot;)
  Date myDateArgumentWithDefaultValue = new Date();
&#125;
</code></pre>
<p>使用下面这种方式就可以传值了:</p>
<pre><code>MyFragment myFragment = MyFragment_.builder()
    .myMessage(&quot;hello&quot;)
    .anotherStringArgument(&quot;world&quot;)
    .build();
</code></pre>
<h2 id="强化Service"><a href="#强化Service" class="headerlink" title="强化Service"></a><strong>强化Service</strong></h2><p><strong>@EService</strong></p>
<pre><code>@EService
public class MyService extends Service &#123;
&#125;
</code></pre>
<p>强化后可以使用一下方法启动和停止Service</p>
<pre><code>MyService_.intent(getApplication()).start();
MyService_.intent(getApplication()).stop();
</code></pre>
<p><strong>@EIntentService</strong></p>
<pre><code>@EIntentService
public class MyIntentService extends IntentService &#123;
&#125;
</code></pre>
<p><strong>@ServiceAction</strong></p>
<pre><code>@EIntentService
public class MyIntentService extends IntentService &#123;
    @ServiceAction
    void myAction(String param) &#123;
        // ...
    &#125;
&#125;
</code></pre>
<p>通过如下方法使用</p>
<pre><code>MyIntentService_.intent(getApplication())
    .myAction(&quot;test&quot;)
    .start();
</code></pre>
<p><strong>@SystemService</strong><br>可以作为方法注解，方法参数注解</p>
<pre><code>@SystemService
NotificationManager notificationManager;
@SystemService
AudioManager audioManager;
</code></pre>
<h2 id="强化BroadcastReceivers"><a href="#强化BroadcastReceivers" class="headerlink" title="强化BroadcastReceivers"></a><strong>强化BroadcastReceivers</strong></h2><p><strong>@EReceiver</strong></p>
<p>@EReceiver<br>    public class MyReceiver extends BroadcastReceiver {<br>    }</p>
<p><strong>@ReceiverAction</strong><br>默认使用方法名作为Action name,也可以重新使用注解的值作为Action;</p>
<pre><code>@EReceiver
public class MyReceiver extends BroadcastReceiver &#123;
    @ReceiverAction(&quot;BROADCAST_ACTION_NAME&quot;)
    void mySimpleAction(Intent intent) &#123;
        // ...
    &#125;

    @ReceiverAction
    void myAction(@ReceiverAction.Extra String valueString, Context context) &#123;
        // ...
    &#125;

    @ReceiverAction
    void anotherAction(@ReceiverAction.Extra(&quot;specialExtraName&quot;) String valueString, @ReceiverAction.Extra long valueLong) &#123;
        // ...
    &#125;

    @ReceiverAction(actions = android.content.Intent.VIEW, dataSchemes = &quot;http&quot;)
    protected void onHttp() &#123;
      // Will be called when an App wants to open a http website but not for https.
    &#125;

    @ReceiverAction(actions = android.content.Intent.VIEW, dataSchemes = &#123;&quot;http&quot;, &quot;https&quot;&#125;)
    protected void onHttps() &#123;
      // Will be called when an App wants to open a http or https website.
  &#125;
&#125;
</code></pre>
<p><strong>@Receiver</strong></p>
<pre><code>@EActivity
public class MyActivity extends Activity &#123;
  @Receiver(actions = &quot;org.androidannotations.ACTION_1&quot;)
  protected void onAction1() &#123;
  &#125;
&#125;
</code></pre>
<h2 id="强化contentproviders"><a href="#强化contentproviders" class="headerlink" title="强化contentproviders"></a><strong>强化contentproviders</strong></h2><p><strong>@EProvider</strong></p>
<pre><code>@EProvider
public class MyContentProvider extends ContentProvider &#123;
&#125;
</code></pre>
<h2 id="强化Custom-View、Custom-Classes"><a href="#强化Custom-View、Custom-Classes" class="headerlink" title="强化Custom View、Custom Classes"></a><strong>强化Custom View、Custom Classes</strong></h2><p><strong>@EView</strong><br>在layout中使用的时候别忘记“_”;</p>
<pre><code>@EView
public class CustomButton extends Button &#123;
&#125;
</code></pre>
<p>在代码中创建可以使用下面方法:</p>
<pre><code>CustomButton button = CustomButton_.build(context);
</code></pre>
<p><strong>@EViewGroup</strong><br>在layout中使用的时候别忘记“_”;</p>
<pre><code>@EViewGroup(R.layout.title_with_subtitle)
public class TitleWithSubtitle extends RelativeLayout &#123;
&#125;
</code></pre>
<p><strong>@EBean</strong></p>
<pre><code>@EBean
public class MyClass &#123;
&#125;
</code></pre>
<p>默认为每次注入创建新的实例，单例模式使用下面的方法</p>
<pre><code>@EBean(scope = Scope.Singleton)
public class MySingleton &#123;
&#125;
</code></pre>
<p><strong>@Bean</strong><br>注入</p>
<pre><code>@Bean
MyClass mClass;
</code></pre>
<h2 id="强化SharedPreferences"><a href="#强化SharedPreferences" class="headerlink" title="强化SharedPreferences"></a><strong>强化SharedPreferences</strong></h2><p><strong>@SharePref</strong></p>
<pre><code>@SharedPref
public interface MyPrefs &#123;
    // The field name will have default value &quot;John&quot;
    @DefaultString(&quot;John&quot;)
    String name();

    // The field age will have default value 42
    @DefaultInt(42)
    int age();

    // The field lastUpdated will have default value 0
    long lastUpdated();
&#125;
</code></pre>
<p>创建整个application共享的sharedPref,使用：</p>
<pre><code>@SharedPref(value=SharedPref.Scope.UNIQUE)
public interface MyPrefs &#123;
&#125;
</code></pre>
<p><strong>@Pref</strong><br>注入</p>
<pre><code>@Pref
MyPrefs_ myPrefs;
</code></pre>
<p>可以通过下面的方式使用SharedPreferences<br>简单编辑：</p>
<pre><code>myPrefs.name().put(&quot;John&quot;);
</code></pre>
<p>批量编辑：</p>
<pre><code>myPrefs.edit()
  .name()
  .put(&quot;John&quot;)
  .age()
  .put(42)
  .apply();
</code></pre>
<p>清除preferences:</p>
<pre><code>myPrefs.clear();
</code></pre>
<p>检查一个值是否存在:</p>
<pre><code>boolean nameExists = myPrefs.name().exists();
</code></pre>
<p>获取一个值:</p>
<pre><code>long lastUpdated = myPrefs.lastUpdated().get();
</code></pre>
<p>获取值并提供默认值:</p>
<pre><code>long now = System.currentTimeMillis();
long lastUpdated = myPrefs.lastUpdated().getOr(now);
</code></pre>
<p>可以设置sharePreference的默认值通过以下注解:<br><strong>@DefaultString</strong><br><strong>@DefaultInt</strong><br><strong>@DefaultLong</strong><br><strong>@DefaultRes</strong><br>通过注解的值设置默认值，也可以直接使用方法名作为值</p>
<pre><code>@SharedPref
public interface MyPrefs &#123;
    @DefaultRes(R.string.defaultPrefName)
    String resourceName();

    @DefaultRes // uses &#39;R.string.defaultPrefAge&#39; to set default value
    String defaultPrefAge();
&#125;
</code></pre>
<h2 id="DataBinding-Support"><a href="#DataBinding-Support" class="headerlink" title="DataBinding Support"></a><strong>DataBinding Support</strong></h2><p><strong>@DataBound</strong><br><strong>@BindingObject</strong></p>
<pre><code>@DataBound
@EActivity(R.layout.main_activity)
public class MainActivity extends Activity &#123;

    @BindingObject
    MainActivityBinding binding;

    @AfterViews
    void bindData() &#123;
        binding.setTitle(&quot;Your title&quot;); // example binding
    &#125;

    @BindingObject
    void injectBinding(MainActivityBinding binding) &#123;
        // assign binding
    &#125;

    void injectBinding2(@BindingObject MainActivityBinding binding) &#123;
        // assign binding
    &#125;
&#125;
</code></pre>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a><strong>使用示例</strong></h2><p><strong>Before</strong></p>
<pre><code>public class BookmarksToClipboardActivity extends Activity &#123;

  BookmarkAdapter adapter;

  ListView bookmarkList;

  EditText search;

  BookmarkApplication application;

  Animation fadeIn;

  ClipboardManager clipboardManager;

  @Override
  protected void onCreate(Bundle savedInstanceState) &#123;
    super.onCreate(savedInstanceState);

    requestWindowFeature(Window.FEATURE_NO_TITLE);
    getWindow().setFlags(FLAG_FULLSCREEN, FLAG_FULLSCREEN);

    setContentView(R.layout.bookmarks);

    bookmarkList = (ListView) findViewById(R.id.bookmarkList);
    search = (EditText) findViewById(R.id.search);
    application = (BookmarkApplication) getApplication();
    fadeIn = AnimationUtils.loadAnimation(this, anim.fade_in);
    clipboardManager = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);

    View updateBookmarksButton1 = findViewById(R.id.updateBookmarksButton1);
    updateBookmarksButton1.setOnClickListener(new OnClickListener() &#123;

      @Override
      public void onClick(View v) &#123;
        updateBookmarksClicked();
      &#125;
    &#125;);

    View updateBookmarksButton2 = findViewById(R.id.updateBookmarksButton2);
    updateBookmarksButton2.setOnClickListener(new OnClickListener() &#123;

      @Override
      public void onClick(View v) &#123;
        updateBookmarksClicked();
      &#125;
    &#125;);

    bookmarkList.setOnItemClickListener(new OnItemClickListener() &#123;

      @Override
      public void onItemClick(AdapterView&lt;?&gt; p, View v, int pos, long id) &#123;
        Bookmark selectedBookmark = (Bookmark) p.getAdapter().getItem(pos);
        bookmarkListItemClicked(selectedBookmark);
      &#125;
    &#125;);

    initBookmarkList();
  &#125;

  void initBookmarkList() &#123;
    adapter = new BookmarkAdapter(this);
    bookmarkList.setAdapter(adapter);
  &#125;

  void updateBookmarksClicked() &#123;
    UpdateBookmarksTask task = new UpdateBookmarksTask();

    task.execute(search.getText().toString(), application.getUserId());
  &#125;

  private static final String BOOKMARK_URL = //
  &quot;http://www.bookmarks.com/bookmarks/&#123;userId&#125;?search=&#123;search&#125;&quot;;


  class UpdateBookmarksTask extends AsyncTask&lt;String, Void, Bookmarks&gt; &#123;

    @Override
    protected Bookmarks doInBackground(String... params) &#123;
      String searchString = params[0];
      String userId = params[1];

      RestTemplate client = new RestTemplate();
      HashMap&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;();
      args.put(&quot;search&quot;, searchString);
      args.put(&quot;userId&quot;, userId);
      HttpHeaders httpHeaders = new HttpHeaders();
      HttpEntity&lt;Bookmarks&gt; request = new HttpEntity&lt;Bookmarks&gt;(httpHeaders);
      ResponseEntity&lt;Bookmarks&gt; response = client.exchange( //
          BOOKMARK_URL, HttpMethod.GET, request, Bookmarks.class, args);
      Bookmarks bookmarks = response.getBody();

      return bookmarks;
    &#125;

    @Override
    protected void onPostExecute(Bookmarks result) &#123;
      adapter.updateBookmarks(result);
      bookmarkList.startAnimation(fadeIn);
    &#125;

  &#125;

  void bookmarkListItemClicked(Bookmark selectedBookmark) &#123;
    clipboardManager.setText(selectedBookmark.getUrl());
  &#125;

&#125;
</code></pre>
<p><strong>After</strong></p>
<pre><code>@Fullscreen
@EActivity(R.layout.bookmarks)
@WindowFeature(Window.FEATURE_NO_TITLE)
public class BookmarksToClipboardActivity extends Activity &#123;

  BookmarkAdapter adapter;

  @ViewById
  ListView bookmarkList;

  @ViewById
  EditText search;

  @App
  BookmarkApplication application;

  @RestService
  BookmarkClient restClient;

  @AnimationRes
  Animation fadeIn;

  @SystemService
  ClipboardManager clipboardManager;

  @AfterViews
  void initBookmarkList() &#123;
    adapter = new BookmarkAdapter(this);
    bookmarkList.setAdapter(adapter);
  &#125;

  @Click(&#123;R.id.updateBookmarksButton1, R.id.updateBookmarksButton2&#125;)
  void updateBookmarksClicked() &#123;
    searchAsync(search.getText().toString(), application.getUserId());
  &#125;

  @Background
  void searchAsync(String searchString, String userId) &#123;
    Bookmarks bookmarks = restClient.getBookmarks(searchString, userId);
    updateBookmarks(bookmarks);
  &#125;

  @UiThread
  void updateBookmarks(Bookmarks bookmarks) &#123;
    adapter.updateBookmarks(bookmarks);
    bookmarkList.startAnimation(fadeIn);
  &#125;

  @ItemClick
  void bookmarkListItemClicked(Bookmark selectedBookmark) &#123;
    clipboardManager.setText(selectedBookmark.getUrl());
  &#125;

&#125;
@Rest(&quot;http://www.bookmarks.com&quot;)
public interface BookmarkClient &#123;

  @Get(&quot;/bookmarks/&#123;userId&#125;?search=&#123;search&#125;&quot;)
  Bookmarks getBookmarks(@Path String search, @Path String userId);

&#125;
</code></pre>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>AndroidAnnotations</tag>
        <tag>注解</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Android查看office文档解决方案</title>
    <url>/2018/01/11/android/Android%E9%98%85%E8%AF%BB%E6%96%87%E6%A1%A3%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>在 iOS 平台上，实现移动端 Office 文档的在线阅读非常简单，只需要使用 WebView 加载网络文件的 Url 地址即可显示。<br>而在 Android 平台上，由于“高墙耸立”，Google 在国内的访问限制，导致这一简单的操作变得复杂起来，<br>开发人员不得不寻求其他解决方案，这里列举一些。</p>
<p><img src="https://xmc-myblog-1257745026.cos.ap-chengdu.myqcloud.com/x5tbs.png" alt="mark"></p>
<a id="more"></a>

<h2 id="WebView-网页显示"><a href="#WebView-网页显示" class="headerlink" title="WebView 网页显示"></a>WebView 网页显示</h2><ol>
<li><p>借助WebView控件加载远程文档的 Url 地址即可:<br>第三方的解析服务有：Google Doc , Office Web 365 ,永中云转换 等；<br>部署解析服务端，开源方案有：PDF.js , pdf2htmlEX 等;</p>
</li>
<li><p>加载本地文档可以借助腾讯的浏览服务TBS实现；</p>
<h3 id="Google-Doc"><a href="#Google-Doc" class="headerlink" title="Google Doc"></a>Google Doc</h3><p>类似 iOS ，Google 也提供了一种在线文档解析的功能，只需要按照固定的格式将远程文档的 Url 地址传给 Google 服务器，<br>即可利用 WebView 控件加载新的 Url 地址，显示即可。WebView 加载的 Url 地址格式如下：</p>
<p><a href="https://docs.google.com/gview?embedded=true&amp;url=%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80">https://docs.google.com/gview?embedded=true&amp;url=文档地址</a></p>
<p>文档地址设置为服务器文档地址就可以了，无需服务器和客户端的额外工作，但是国内访问需要翻墙。</p>
<h3 id="Office-Web362"><a href="#Office-Web362" class="headerlink" title="Office Web362"></a>Office Web362</h3><p>第三方公司提供的一种 Office 文档在线预览的功能，能够实现 Microsoft、Adobe、WPS 文档的移动端和PC端在线网页访问。<br>使用简单，类似 Google Doc 访问方式，一个固定格式的链接，轻松实现：</p>
<p><a href="http://ow365.cn/?i=%E6%82%A8%E7%9A%84%E7%BD%91%E7%AB%99ID&amp;furl=%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80">http://ow365.cn/?i=您的网站ID&amp;furl=文档地址</a></p>
<p>功能强大，使用简单，但是<strong>付费</strong>使用(可免费受限使用，如访问次数，广告显示等)，具体内容可以通过<a href="http://www.officeweb365.com/">OfficeWeb365</a><br>查看。</p>
</li>
</ol>
<h3 id="永中云转换"><a href="#永中云转换" class="headerlink" title="永中云转换"></a>永中云转换</h3><p>1.支持doc/docx、xls/xlsx、ppt/pptx和pdf、压缩文件等20多种常用Office文档转换为高度兼容的高清网页，实现快捷查阅文档内容，提升工作效率。<br>2.支持移动阅读，针对移动设备特别优化，支持内容自适应屏幕大小和方向；支持文档缩略图，可将文档首页内容直观呈现。<br>3.转换效率高，可同时支持多个文档同时转换，支持多核多线程并发访问（需服务器和网络环境支持）。<br>4.开发部署简单高效，只需要传入待转换的文档和相关参数，系统自动返回转换后文件URL。<br>5.支持本地化部署和互联网调用，支持Linux和Windows等多种操作系统。<br>6.基于自主可控Office核心技术，支持特定需求的定制开发。<br>7.支持在线编辑，实现文档编辑功能，使用简单，便捷（<strong>付费</strong>）。</p>
<p>  可以使用部署在公有云上的服务，客户端注册后获取相关服务信息，在互联网上直接远程调用永中DCS转换接口，获取文档预览效果（通过webView加载即可）或目标格式的转换文档。<br>同时支持在线编辑等定制化业务，详细内容可查看<a href="http://www.yozodcs.com/index.html">永中DCS</a></p>
<h3 id="腾讯TBS浏览服务"><a href="#腾讯TBS浏览服务" class="headerlink" title="腾讯TBS浏览服务"></a>腾讯TBS浏览服务</h3><p>  依托 X5 内核强大的能力，TBS 致力于提供优化移动端浏览体验的整套解决方案。 TBS 虽然核心在于提供一套 SDK 解决传统 WebView 的诸多使用问题。<br>但是，利用其增强浏览能力，我们还能够使用这套 SDK 实现应用内的文件浏览功能、视频播放功能等。<br>  使用简单集成TBS提供的SDK，详细集成操作请参考<a href="https://x5.tencent.com/tbs/index.html">TBS腾讯浏览服务</a>。<br>  对于浏览文件这方面官方没有提供完善使用文档和Demo，可以借鉴<a href="https://www.jianshu.com/p/3f57d640b24d">这篇文章</a>,集成TBS的SDK后打开本地文件的代码很简单：</p>
<pre><code> Bundle bundle = new Bundle();
  bundle.putString(&quot;filePath&quot;, getLocalFile().getPath());
  bundle.putString(&quot;tempPath&quot;, Environment.getExternalStorageDirectory().getPath());
  boolean result = mTbsReaderView.preOpen(parseFormat(mFileName), false);
  if (result) &#123;
    mTbsReaderView.openFile(bundle);
  &#125;
</code></pre>
<p>  缺点是只能打开本地文件，需要先下载。</p>
<h2 id="集成开源或者第三方的本地解析SDK"><a href="#集成开源或者第三方的本地解析SDK" class="headerlink" title="集成开源或者第三方的本地解析SDK"></a>集成开源或者第三方的本地解析SDK</h2><h3 id="免费开源SDK"><a href="#免费开源SDK" class="headerlink" title="免费开源SDK"></a>免费开源SDK</h3><ul>
<li><a href="https://android.googlesource.com/platform/external/pdfium">pdfium</a> Google 的开源项目，也是 Chrome 浏览器的PDF渲染引擎，初始代码来自国内知名PDF技术公司「福昕」。</li>
<li><a href="https://github.com/barteksc/AndroidPdfViewer">AndroidPdfViewer</a></li>
<li><a href="https://github.com/barteksc/PdfiumAndroid">PdfiumAndroid</a> 基于 pdfium 的 Android 平台实现方式，支持 PDF 文档的应用内预览，支持动画、缩放、手势和双击操作。</li>
<li><a href="https://mupdf.com/">MuPDF</a></li>
</ul>
<h3 id="付费SDK"><a href="#付费SDK" class="headerlink" title="付费SDK"></a>付费SDK</h3><ul>
<li><a href="https://www.foxitsoftware.cn/products/sdk/PDFsdk/android">Foxit PDF SDK</a> 福昕出品，性能稳定，功能强大</li>
<li><a href="https://plugpdf.com/">plugPDF</a> 来自国外的一个付费 SDK，使用简单，只需三步即可集成到自己的应用中并使用。</li>
</ul>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>office办公文档</tag>
        <tag>webView</tag>
      </tags>
  </entry>
  <entry>
    <title>Dagger2-Android依赖注入框架的学习</title>
    <url>/2021/02/03/android/Dragger2/</url>
    <content><![CDATA[<p>通过学习如何使用它，来体验它给android编程带来的优点。</p>
<blockquote>
<p>官方的使用文档<br><a href="https://google.github.io/dagger//">https://google.github.io/dagger//</a></p>
</blockquote>
<p><img src="https://xmc-myblog-1257745026.cos.ap-chengdu.myqcloud.com/dragger2.png" alt="mark"></p>
<a id="more"></a>
<hr>
<blockquote>
<p>转载并修改自，天天博客<br><a href="http://www.cnblogs.com/tiantianbyconan/p/5092525.html">http://www.cnblogs.com/tiantianbyconan/p/5092525.html</a></p>
</blockquote>
<blockquote>
<p>原文翻译自：<br><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-the-api">http://frogermcs.github.io/dependency-injection-with-dagger-2-the-api</a></p>
</blockquote>
<blockquote>
<p>关于Dagger2的作用，以及依赖注入就不做介绍了，下面这边文章介绍的很好：<br><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-introdution-to-di">http://frogermcs.github.io/dependency-injection-with-dagger-2-introdution-to-di</a></p>
</blockquote>
<p>这是Dagger2的API:</p>
<pre><code>public @interface Component &#123;
    Class&lt;?&gt;[] modules() default &#123;&#125;;
    Class&lt;?&gt;[] dependencies() default &#123;&#125;;
&#125;

public @interface Subcomponent &#123;
    Class&lt;?&gt;[] modules() default &#123;&#125;;
&#125;

public @interface Module &#123;
    Class&lt;?&gt;[] includes() default &#123;&#125;;
&#125;

public @interface Provides &#123;
&#125;

public @interface MapKey &#123;
    boolean unwrapValue() default true;
&#125;

public interface Lazy&lt;T&gt; &#123;
    T get();
&#125;
</code></pre>
<p>还有在Dagger2中使用到的在JSR-330（java依赖注入的标准）中定义的其他元素：</p>
<pre><code>public @interface Inject &#123;
&#125;

public @interface Scope &#123;
&#125;

public @interface Qualifier &#123;
&#125;
</code></pre>
<p>这API看上去十分的简单，但这个简单的API使用起来并不简单。</p>
<p>下面我们来学习这些API的使用</p>
<h2 id="Inject注解"><a href="#Inject注解" class="headerlink" title="@Inject注解"></a>@Inject注解</h2><p>这个注解是Dagger2依赖注入框架(以下简称DI框架)中最重要的注解。是JSR-330标准的一部分，用来标记依赖注入框架应该提供的依赖关系，DI框架中有三种方式来提供依赖关系：<br><strong>Constructor injection构造方法注入</strong><br>@inject和类的构造方法一起使用:</p>
<pre><code>public class LoginActivityPresenter &#123;
    
    private LoginActivity loginActivity;
    private UserDataStore userDataStore;
    private UserManager userManager;
    
    @Inject
    public LoginActivityPresenter(LoginActivity loginActivity,
                                  UserDataStore userDataStore,
                                  UserManager userManager) &#123;
        this.loginActivity = loginActivity;
        this.userDataStore = userDataStore;
        this.userManager = userManager;
    &#125;
&#125;
</code></pre>
<p>构造方法中的所有参数都通过依赖关系图获取。<br>在构造方法中使用@Inject注解也使得这个类成为依赖关系图的一部分。<br>这也表示它可以在需要的时候被注入，如（Fields injection）：</p>
<pre><code>public class LoginActivity extends BaseActivity &#123;

    @Inject
    LoginActivityPresenter presenter;
   
    //...
&#125;
</code></pre>
<p>（这里需要注意的是我们不能给同一个类的多个构造函数添加@Inject注解）</p>
<p><strong>Fields injection字段注入</strong><br>@Inject来注解特定的字段：</p>
<pre><code>public class SplashActivity extends AppCompatActivity &#123;
    
    @Inject
    LoginActivityPresenter presenter;
    @Inject
    AnalyticsManager analyticsManager;
    
    @Override
    protected void onCreate(Bundle bundle) &#123;
        super.onCreate(bundle);
        getAppComponent().inject(this);
    &#125;
&#125;
</code></pre>
<p>这种方式，注入过程中必须通过在我们的类中主动调用：</p>
<pre><code>public class SplashActivity extends AppCompatActivity &#123;
    
    //...
    
    @Override 
    protected void onCreate(Bundle bundle) &#123;
        super.onCreate(bundle);
        getAppComponent().inject(this);//Requested depenencies are injected in this moment
    &#125;
&#125;
</code></pre>
<p>在这个调用之前，我们的依赖是null。<br>这里有一个限制，注入的依赖不能被private修饰。为什么呢？<br>简单解释下就是，在生成的代码中通过直接调用给他们赋值，如下：</p>
<pre><code>//This class is generated automatically by Dagger 2
public final class SplashActivity_MembersInjector implements MembersInjector&lt;SplashActivity&gt; &#123;
    //...
    @Override
    public void injectMembers(SplashActivity splashActivity) &#123;
        if (splashActivity == null) &#123;
            throw new NullPointerException(&quot;Cannot inject members into a null reference&quot;);
        &#125;
        supertypeInjector.injectMembers(splashActivity);
        splashActivity.presenter = presenterProvider.get();
        splashActivity.analyticsManager = analyticsManagerProvider.get();
    &#125;
&#125;
</code></pre>
<p><strong>Methods injection方法注入</strong><br>最后一种提供依赖的方法是通过对类中的public方法使用@Inject注解：</p>
<pre><code>public class LoginActivityPresenter &#123;
    
    private LoginActivity loginActivity;
    
    @Inject 
    public LoginActivityPresenter(LoginActivity loginActivity) &#123;
        this.loginActivity = loginActivity;
    &#125;

    @Inject
    public void enableWatches(Watches watches) &#123;
        watches.register(this); //Watches instance required fully constructed LoginActivityPresenter
    &#125;
&#125;
</code></pre>
<p>所有方法的参数都通过依赖关系图获取。<br>有构造方法注入了，我们为什么还需要方法注入呢？<br>在这样一种情况下我们可能会用到，当我们需要把当前类的实例（this）作为依赖传递出去的时候，方法注入会在构造方法调用完成之后被调用，这也就保证了我们传递的this是一个构造完成的对象。</p>
<h2 id="Module注解"><a href="#Module注解" class="headerlink" title="@Module注解"></a>@Module注解</h2><p>@Module是Dagger2API的一部分，这个注解使用来表示提供依赖的类的-从而让Dagger知道需要的类是在哪里被构建的。</p>
<pre><code>@Module
public class GithubApiModule &#123;
    
    @Provides
    @Singleton
    OkHttpClient provideOkHttpClient() &#123;
        OkHttpClient okHttpClient = new OkHttpClient();
        okHttpClient.setConnectTimeout(60 * 1000, TimeUnit.MILLISECONDS);
        okHttpClient.setReadTimeout(60 * 1000, TimeUnit.MILLISECONDS);
        return okHttpClient;
    &#125;

    @Provides
    @Singleton
    RestAdapter provideRestAdapter(Application application, OkHttpClient okHttpClient) &#123;
        RestAdapter.Builder builder = new RestAdapter.Builder();
        builder.setClient(new OkClient(okHttpClient))
               .setEndpoint(application.getString(R.string.endpoint));
        return builder.build();
    &#125;
&#125;
</code></pre>
<h2 id="Provides注解"><a href="#Provides注解" class="headerlink" title="@Provides注解"></a>@Provides注解</h2><p>这个注解使用在@Module类中。在@Module类中@Provides用来标记哪些返回依赖的方法</p>
<pre><code>@Module
public class GithubApiModule &#123;
    
    //...
    
    @Provides   //This annotation means that method below provides dependency
    @Singleton
    RestAdapter provideRestAdapter(Application application, OkHttpClient okHttpClient) &#123;
        RestAdapter.Builder builder = new RestAdapter.Builder();
        builder.setClient(new OkClient(okHttpClient))
               .setEndpoint(application.getString(R.string.endpoint));
        return builder.build();
    &#125;
&#125;
</code></pre>
<h2 id="Component注解"><a href="#Component注解" class="headerlink" title="@Component注解"></a>@Component注解</h2><p>这个注解用来构建一个把这些东西联系到一起的接口。在这个接口中，我们定义好要获取的依赖从哪些modules或者其它Components来。同时，在这个接口中我们还需要定义可见的依赖关系图（可见的依赖即可以被注入的）以及我们可以在哪些地方注入对象。可以认为@Component就像@Module和@Inject之间的桥梁一样。<br>在下面的实例代码中使用@Component构建的接口，使用了两个Modules，并且可以注入依赖到GithubClientApplication，并且标记了三个可见的依赖:</p>
<pre><code>@Singleton
@Component(
    modules = &#123;
        AppModule.class,
        GithubApiModule.class
    &#125;
)
public interface AppComponent &#123;

    void inject(GithubClientApplication githubClientApplication);

    Application getApplication();

    AnalyticsManager getAnalyticsManager();

    UserManager getUserManager();
&#125;
</code></pre>
<p>同样@Component可以依赖其他Component，并且必须得定义生命周期（这个会在下面scoping 说到）:</p>
<pre><code>@ActivityScope
@Component(      
    modules = SplashActivityModule.class,
    dependencies = AppComponent.class
)
public interface SplashActivityComponent &#123;
    SplashActivity inject(SplashActivity splashActivity);

    SplashActivityPresenter presenter();
&#125;
</code></pre>
<p>@Scope注解</p>
<pre><code>@Scope
public @interface ActivityScope &#123;
&#125;
</code></pre>
<p>JSR-330标准的另外一个部分。在Dagger2中，@scope是用来定义自定义scope的注解。自定义的scope可以使得依赖区别于单例，被single-instance注解的依赖只关联到Component的生命周期（不是整个application）。所有的自定义scope做同一件事情-他们持有对象的唯一实例。自定义的scope可以尽可能快的发现图表结构的问题。</p>
<p>先学习到这里，持续更新中… …</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>Dagger2</tag>
        <tag>依赖注入</tag>
        <tag>解耦</tag>
      </tags>
  </entry>
</search>
